version: '3.8'

services:
  frontend:
    build:
      context: ../client
      dockerfile: ../docker/client/Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
      - frontend-network

  backend:
    build:
      context: ../server
      dockerfile: ../docker/server/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/mp4-to-gif
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-here
    depends_on:
      - mongodb
      - redis
    networks:
      - frontend-network
      - backend-network

  worker:
    build:
      context: ../worker
      dockerfile: ../docker/worker/Dockerfile
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/mp4-to-gif
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - backend-network

  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - backend
    networks:
      - frontend-network

networks:
  frontend-network:
  backend-network:

volumes:
  mongodb_data:
  redis_data: 